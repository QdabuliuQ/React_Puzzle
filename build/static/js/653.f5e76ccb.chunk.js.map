{"version":3,"file":"static/js/653.f5e76ccb.chunk.js","mappings":"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","sources":["pages/GamePage/components/Puzzle/Puzzle.jsx","pages/GamePage/GamePage.jsx"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { SpinLoading, Toast } from 'antd-mobile'\r\nimport PubSub from 'pubsub-js'\r\nimport download from \"utils/download\";\r\nimport { getRandomImage } from \"network/index\";\r\nimport PuzzleItem from \"components/PuzzleItem/PuzzleItem\";\r\nimport \"./Puzzle.less\"\r\n\r\nlet token1;\r\nlet token2;\r\nlet token3;\r\nlet token4;\r\nexport default class Puzzle extends Component {\r\n  state = {\r\n    isLoad: true,\r\n    imageUrl: '', // 图片url\r\n    mode: 3,  // 3*3\r\n    imageList: [],  // 小图片数组\r\n    randomList: [],  // 小图片乱序\r\n    itemWidth: 0,\r\n    gap: 5,  // 图片间隙\r\n    containWidth: 0,  // 拼图容器的宽度\r\n    activeIndex: -1,  // 被点击的拼图\r\n  }\r\n\r\n  // 切割图片\r\n  computedCanvas = (image, size) => {\r\n    let tempList = []\r\n    let width = size / this.state.mode\r\n    let k = 1\r\n    for (let j = 0; j < this.state.mode; j++) {\r\n      for (let i = 0; i < this.state.mode; i++) {\r\n        const canvas = document.createElement('canvas')\r\n        const ctx = canvas.getContext('2d')\r\n        canvas.width = width\r\n        canvas.height = width\r\n        canvas.style.width = '100%'\r\n        ctx.drawImage(image, i * width, j * width, width, width, 0, 0, width, width)\r\n        tempList.push({\r\n          ...this.computedAxis(k - 1, 'x', 'y'),\r\n          index: k,\r\n          base64: canvas.toDataURL(\"image/png\")\r\n        })\r\n        k++\r\n      }\r\n    }\r\n    this.setState({\r\n      imageList: tempList\r\n    }, () => {\r\n      this.randomList()\r\n    })\r\n  }\r\n\r\n  // 获取图片url\r\n  getImageUrl = () => {\r\n    // getRandomImage().then(res => {\r\n    //   this.state.imageUrl = res.replace('https://tuapi.eees.cc', '/api1')\r\n    //   const image = new Image()\r\n    //   image.src = this.state.imageUrl\r\n    //   image.crossOrigin = '';\r\n    //   image.onload = () => {\r\n    //     let size = image.width > image.height ? image.height : image.width\r\n    //     this.computedCanvas(image, size)\r\n    //   }\r\n    // })\r\n    this.setState({\r\n      imageUrl: require('assets/images/coder.jpg')\r\n    }, () => {\r\n      const image = new Image()\r\n      image.src = this.state.imageUrl\r\n      image.crossOrigin = '';\r\n      image.onload = () => {\r\n        let size = image.width > image.height ? image.height : image.width\r\n        this.computedCanvas(image, size)\r\n      }\r\n    })\r\n  }\r\n\r\n  // 打乱数组元素\r\n  randomList = () => {\r\n    let temp = [...this.state.imageList]\r\n    temp.sort((item) => {\r\n      return Math.random() - 0.5\r\n    })\r\n    for (let i = 0; i < temp.length; i++) {\r\n      temp[i] = Object.assign(temp[i],this.computedAxis(i));\r\n    }\r\n    this.setState({\r\n      randomList: temp,\r\n      isLoad: false\r\n    })\r\n  }\r\n\r\n  // 计算坐标\r\n  computedAxis = (index, propertyName_x = 'left', propertyName_y = 'top') => {\r\n    let left;\r\n    let top;\r\n    if (index == 0) {\r\n      left = index % this.state.mode * this.state.itemWidth + 'px'\r\n      top = Math.floor(index / this.state.mode) * this.state.itemWidth + 'px'\r\n    } else if (index != 0 && index < this.state.mode) {\r\n      left = index % this.state.mode * this.state.itemWidth + (this.state.gap * (index % this.state.mode)) + 'px'\r\n      top = Math.floor(index / this.state.mode) * this.state.itemWidth + 'px'\r\n    } else if (index % this.state.mode == 0) {\r\n      left = index % this.state.mode * this.state.itemWidth + 'px'\r\n      top = Math.floor(index / this.state.mode) * this.state.itemWidth + (this.state.gap * Math.floor(index / this.state.mode)) + 'px'\r\n    } else {\r\n      left = index % this.state.mode * this.state.itemWidth + (this.state.gap * (index % this.state.mode)) + 'px'\r\n      top = Math.floor(index / this.state.mode) * this.state.itemWidth + (this.state.gap * Math.floor(index / this.state.mode)) + 'px'\r\n    }\r\n    return {\r\n      [propertyName_x]: left,\r\n      [propertyName_y]: top\r\n    }\r\n  }\r\n\r\n  // 拼图点击\r\n  puzzleItemClick = (e) => {\r\n    if (e == this.state.activeIndex) {\r\n      this.setState({\r\n        activeIndex: -1,\r\n      })\r\n    } else if (this.state.activeIndex == -1) {\r\n      this.setState({\r\n        activeIndex: e,\r\n      })\r\n    } else {  // 交换拼图位置\r\n      // 获取 activeIndex 上一个点击的拼图索引\r\n      let temp = JSON.parse(JSON.stringify(this.state.randomList))\r\n      let e_left = temp[e].left\r\n      let e_top = temp[e].top\r\n      temp[e].left = temp[this.state.activeIndex].left\r\n      temp[e].top = temp[this.state.activeIndex].top\r\n      temp[this.state.activeIndex].left = e_left\r\n      temp[this.state.activeIndex].top = e_top\r\n      this.setState({\r\n        activeIndex: -1,\r\n        randomList: temp\r\n      })\r\n      this.checkPuzzle(temp)\r\n    }\r\n  }\r\n\r\n  checkPuzzle = (arr) => {\r\n    for (let i = 1; i < arr.length; i++) {\r\n      if ((arr[i].left != arr[i].x) || (arr[i].top != arr[i].y)) {\r\n        return\r\n      }\r\n    }\r\n    PubSub.publish('success')\r\n  }\r\n\r\n  componentDidMount() {\r\n    let width = (document.documentElement.clientWidth - 30) / this.state.mode\r\n    this.setState({\r\n      itemWidth: width,\r\n      containWidth: width * this.state.mode + ((this.state.mode - 1) * this.state.gap)\r\n    })\r\n    this.getImageUrl()\r\n    \r\n    // 替换图片\r\n    token1 = PubSub.subscribe('replace', () => {\r\n      this.setState({\r\n        isLoad: true\r\n      }, () => {\r\n        this.getImageUrl()\r\n      })\r\n    })  \r\n    \r\n    // 保存图片\r\n    token2 = PubSub.subscribe('save', () => {\r\n      download(this.state.imageUrl, 'image')\r\n    })\r\n\r\n    // 重新排序图片\r\n    token3 = PubSub.subscribe('rank', () => {\r\n      this.setState({\r\n        isLoad: true\r\n      }, () => {\r\n        this.randomList()\r\n      })  \r\n    })\r\n\r\n    // 模式切换\r\n    token4 = PubSub.subscribe('modeChange', (msg, e) => {\r\n      this.setState({\r\n        isLoad: true,\r\n        itemWidth: (this.state.containWidth - (e - 1) * this.state.gap) / e,\r\n        mode: e\r\n      }, () => {\r\n        const image = new Image()\r\n        image.src = this.state.imageUrl\r\n        image.crossOrigin = '';\r\n        image.onload = () => {\r\n          let size = image.width > image.height ? image.height : image.width\r\n          this.computedCanvas(image, size)\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    PubSub.unsubscribe(token1)\r\n    PubSub.unsubscribe(token2)\r\n    PubSub.unsubscribe(token3)\r\n    PubSub.unsubscribe(token4)\r\n  }\r\n\r\n  render() {\r\n    const { isLoad, randomList, itemWidth, containWidth, activeIndex, imageList } = this.state\r\n    return (\r\n      <div id='Puzzle'>\r\n        <div style={{ width: containWidth + 'px' }} className='puzzleContainer'>\r\n          {\r\n            isLoad && (\r\n              <div className='loadMask'>\r\n                <SpinLoading style={{'--color': '#eaad30', '--size': '100px' }} />\r\n              </div>\r\n            )\r\n          }\r\n          {\r\n            randomList.map((value, index) => (\r\n              <PuzzleItem \r\n                i={value.index}\r\n                key={index}\r\n                image={value.base64}\r\n                size={itemWidth}\r\n                left={value.left}\r\n                top={value.top}\r\n                index={index}\r\n                activeIndex={activeIndex}\r\n                clickEvent={this.puzzleItemClick} />\r\n              )\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Puzzle from \"./components/Puzzle/Puzzle\";\r\nimport Fireworks from \"./components/Fireworks/Fireworks\";\r\nimport OpeList from \"./components/OpeList/OpeList\";\r\nimport ToggleLevel from \"./components/ToggleLevel/ToggleLevel\";\r\nimport Back from \"components/Back/Back\";\r\nimport \"./GamePage.less\"\r\n\r\nexport default class GamePage extends Component {\r\n  state = {\r\n    end: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      this.setState({\r\n        end: true\r\n      })\r\n    }, 100);\r\n  }\r\n\r\n  render() {\r\n    const {end} = this.state\r\n    return (\r\n      <div id='GamePage'>\r\n        <div className='bgImageContainer'>\r\n          <img src={require('assets/images/bg.jpg')} alt=\"\" />\r\n        </div>\r\n        <div className='logoContainer'>\r\n          <img src={require('assets/images/logo.png')} alt=\"\" />\r\n        </div>\r\n        <Back />\r\n        <Puzzle />\r\n        <div className='bottomBox'>\r\n          <OpeList />\r\n          <ToggleLevel />\r\n        </div>\r\n        <Fireworks />\r\n      </div>\r\n    )\r\n  }\r\n}"],"names":["token1","token2","token3","token4","Puzzle","state","isLoad","imageUrl","mode","imageList","randomList","itemWidth","gap","containWidth","activeIndex","computedCanvas","image","size","tempList","width","k","j","i","canvas","document","createElement","ctx","getContext","height","style","drawImage","push","computedAxis","index","base64","toDataURL","setState","getImageUrl","require","Image","src","crossOrigin","onload","temp","sort","item","Math","random","length","Object","assign","left","top","propertyName_x","propertyName_y","floor","puzzleItemClick","e","JSON","parse","stringify","e_left","e_top","checkPuzzle","arr","x","y","PubSub","documentElement","clientWidth","this","download","msg","id","className","map","value","PuzzleItem","clickEvent","Component","GamePage","end","setTimeout","alt","Back","OpeList","ToggleLevel","Fireworks"],"sourceRoot":""}